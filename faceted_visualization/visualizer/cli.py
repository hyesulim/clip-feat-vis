import argparse
import ast
from argparse import ArgumentParser
import os
import constants


def parse_args() -> argparse.Namespace:
    parser = ArgumentParser()
    parser.add_argument(
        "--config-file-path",
        help="location of configuration file.",
        required=True,
        dest=constants.PATH_CONFIG_FILE
    )
    parser.add_argument(
        "--model",
        action='store',
        help='model to visualize (only supports CLIP models)',
        dest=constants.MODEL
    )
    parser.add_argument(
        "--layer",
        help="layer to visualize",
        dest=constants.VISUALIZATION_LAYER
    )
    parser.add_argument(
        "--linear-probe-layer",
        help="layer on which linear probe was trained (must be prior to visualization layer)",
        dest=constants.LINEAR_PROBE_LAYER
    )
    parser.add_argument(
        "--objective",
        choices=[
            "channel",
            "neuron"
        ],
        help="whether neuron or channel activation should be maximized. If neuron is selected, the default option is "
             "the center neuron on the channel.",
        dest=constants.OBJECTIVE
    )
    parser.add_argument(
        "--opt",
        choices=[
            constants.ADAM,
            constants.ADAM_W,
            constants.SGD
        ],
        help="optimizer type",
        dest=constants.OPTIMIZER
    )
    parser.add_argument(
        "--learning-rate",
        help="initial learning rate for the optimizer",
        dest=constants.LEARNING_RATE,
        type=float
    )
    parser.add_argument(
        "--channel",
        help="channel number for visualization",
        dest=constants.CHANNEL,
        type=int
    )
    parser.add_argument(
        "--neuron-x",
        help="x coordinate of neuron whose activation should be maximized. This is only used if objective is "
             "'neuron' and both x and y coordinates are provided",
        dest=constants.NEURON_X,
        type=int
    )
    parser.add_argument(
        "--neuron-y",
        help="y coordinate of neuron whose activation should be maximized. This is only used if objective is "
             "'neuron' and both x and y coordinates are provided",
        dest=constants.NEURON_Y,
        type=int
    )
    parser.add_argument(
        "--image-width",
        help="width of image to render",
        dest=constants.IMAGE_WIDTH,
        type=int
    )
    parser.add_argument(
        "--image-height",
        help="height of image to render",
        dest=constants.IMAGE_HEIGHT,
        type=int
    )
    parser.add_argument(
        "--num-iterations",
        help="number of iterations to perform optimization",
        dest=constants.NUMBER_OF_ITERATIONS,
        type=int
    )
    parser.add_argument(
        "--linear-probe-path",
        help="path to linear probe",
        dest=constants.PATH_LINEAR_PROBE
    )
    parser.add_argument(
        "--output_directory",
        help="output directory where logs and images need to be saved.",
        dest=constants.PATH_OUTPUT
    )
    parser.add_argument(
        "--wandb",
        help="toggle whether WandB is enabled",
        action=argparse.BooleanOptionalAction,
        dest=constants.WANDB_ENABLED
    )
    parser.add_argument(
        "--wandb-run-name",
        help="name of WandB run. If nothing is provided, the run name will be auto-generated by WandB.",
        dest=constants.WANDB_RUN_NAME
    )
    parser.add_argument(
        "--use-transforms",
        help="whether standard transforms should be used while optimizing image.",
        dest=constants.USE_TRANSFORMS,
        action=argparse.BooleanOptionalAction
    )
    parser.add_argument(
        "--random-seed",
        help="random seed",
        dest=constants.RANDOM_SEED,
        type=int
    )
    parser.add_argument(
        "--decorrelate",
        help="select 0 for no decorrelation. Anything else will enable decorrelation",
        dest=constants.IMG_DECORRELATE,
        type=int
    )
    parser.add_argument(
        "--fft",
        help="select 0 for no FFT. Anything else will enable FFT",
        dest=constants.IMG_FFT,
        type=int
    )
    args = parser.parse_args()
    return args


if __name__ == '__main__':
    parse_args()
